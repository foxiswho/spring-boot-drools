package rules.cart;
// 上面部分定义包名称

//下面 CartModel 部分 ，由 kieSession.insert 传入的对象
import com.foxwho.springbootdroolsdemo.model.CartModel
import com.foxwho.springbootdroolsdemo.model.GoodsModel
import com.foxwho.springbootdroolsdemo.model.StockModel

//下面 静态方法类 ，引用要具体 类的方法
import function cn.hutool.core.util.StrUtil.isNotBlank;
import function cn.hutool.core.util.StrUtil.isBlank;
import function cn.hutool.core.util.StrUtil.format;
import function com.foxwho.springbootdroolsdemo.util.StrDemoUtil.containsStr;

//下面 service 类的 传入, 日志类[Logger]， 返回值类[WrapperDrools]
//import org.slf4j.Logger;
//import com.foxwho.springbootdroolsdemo.util.WrapperDrools;

//下面 是对应 service 类的公共变量
global com.foxwho.springbootdroolsdemo.util.WrapperDrools wrapperDrools;
global org.slf4j.Logger LOG;

dialect  "java"

rule "goodsId not 0"
    salience 1
    when
         $cart : CartModel(goodsId==null || goodsId<1,next==true)
//         $cart : CartModel(getGoodsId()==null || getGoodsId()<1,getNext()!=1)
        //判断 名称为空 则执行 then
         eval(isBlank($cart.getName()))
    then
        //设置 不在执行后续规则
        $cart.setNext(false);
//        System.out.println("购物车中 商品数据 错误");
        LOG.info("drools-rule-log:{}","购物车中 商品数据 错误");

        wrapperDrools.error("购物车中 商品数据 错误");

        update($cart);
end

rule "good getName"
    salience 2
    when
         $cart : CartModel(goodsId>0,next==true)
         eval(isBlank($cart.getName()))
    then
        //设置 不在执行后续规则
        $cart.setNext(false);
//        System.out.println("商品名称不能为空");
        LOG.info("drools-rule-log:商品名称不能为空 {}",$cart);

        wrapperDrools.error("商品名称不能为空");


        update($cart);


end

rule "is cart"
    salience 3
    when
         $cart : CartModel(goodsId>0)
         eval(isNotBlank($cart.getName()))
    then
        // 给购物车中的 商品名称 加 几个字符
        $cart.setName($cart.getName()+"====>");
//        System.out.println("这是购物车商品:"+$cart.getName());
        LOG.info("drools-rule-log:这是购物车商品 {}",$cart.getName());
//        update($cart);
end

rule "商品名称包含 【奶粉】关键字不允许购买"
    enabled true
    salience 4
    no-loop true
    when
         $cart : CartModel(name contains "奶粉" ,next==true)
//         eval(containsStr($cart.getName(),"奶粉"))
    then
        //设置 不在执行后续规则
        $cart.setNext(false);

        LOG.info("drools-rule-log:商品名称包含 【奶粉】关键字不允许购买 {}",$cart.getName());

        wrapperDrools.error("商品名称包含 【奶粉】关键字不允许购买");

        update($cart);
end

rule "购买数量"
    salience 5
    no-loop true
    when
         $cart : CartModel(num<1,next==true)
    then
        //设置 不在执行后续规则
        $cart.setNext(false);
//        System.out.println("购买数量不能小于1");
        LOG.info("drools-rule-log:购买数量不能小于1");

        wrapperDrools.error("购买数量不能小于 1 ");
        update($cart);
end
rule "最小 大购买数"
    salience 6
    no-loop true
    when
        $goods : GoodsModel()
        $cart : CartModel(num<$goods.min||num>$goods.max,next==true)
    then
        //设置 不在执行后续规则
        $cart.setNext(false);
//        System.out.println("最小购买数 不能小于"+$goods.getMin());
//        System.out.println("最大购买数 不能小于"+$goods.getMax());

        LOG.info("drools-rule-log:最小购买数 不能小于 {}",$goods.getMin());
        LOG.info("drools-rule-log:最大购买数 不能大于 {}",$goods.getMax());
        LOG.info("drools-rule-log:GoodsModel {}",$goods);
//        LOG.info("drools-rule-log: {}",StrUtil.format("最小购买数 不能小于 {} 或 最大购买数 不能大于 {}",$goods.getMin(),$goods.getMax()));
        //wrapperDrools.error(StrUtil.format("最小购买数 不能小于 {} 或 最大购买数 不能大于 {}",$goods.getMin(),$goods.getMax()));

        wrapperDrools.error("最大购买数 不能大于 "+$goods.getMax()+" 或 最小购买数 不能小于 "+$goods.getMin() );

        update($cart);
end
rule "库存"
    salience 7
    no-loop true
    when
        $stock : StockModel(num>0)
        $cart : CartModel(num>$stock.num,next==true)
    then
        //设置 不在执行后续规则
        $cart.setNext(false);
//        System.out.println("购物车 num:"+$cart.getNum());
//        System.out.println("库存 num:"+$stock.getNum());
        LOG.info("drools-rule-log:购物车 num: {}",$cart.getNum());
        LOG.info("drools-rule-log:库存 num: {}",$stock.getNum());

        wrapperDrools.error("库存不足");

        update($cart);
end